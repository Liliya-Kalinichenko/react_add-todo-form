{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","helper.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","cn","TodoList","todos","map","getUserById","userId","usersFromServer","find","getNewTodoId","Math","max","initialTodos","App","useState","setTodos","setTitle","titleError","setTitleError","setUserId","userIdError","setUserIdError","action","method","onSubmit","event","newTodo","preventDefault","trim","currentTodos","htmlFor","type","placeholder","value","onChange","target","replaceAll","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.437ca9fd.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ninterface Props {\n  user: User\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (<UserInfo user={user} />)}\n    </article>\n  );\n};\n","import React from 'react';\n\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          todo={todo}\n          key={todo.id}\n        />\n      ))}\n    </section>\n  );\n};\n","import { Todo } from './types/Todo';\nimport usersFromServer from './api/users';\n\nexport function getUserById(userId: number) {\n  return usersFromServer.find(user => user.id === userId)\n    || null;\n}\n\nexport function getNewTodoId(todos: Todo[]) {\n  const maxId = Math.max(...todos.map(todo => todo.id));\n\n  return maxId + 1;\n}\n\nexport const normalizeInputValue = (value: string) => {\n  const invalidSymbols = /[^a-zA-Za-åa-ö-w-я 0-9/ .,]/gi;\n\n  return value.replaceAll(invalidSymbols, '');\n};\n","import React, { useState } from 'react';\n\nimport './App.scss';\nimport todosFromServer from './api/todos';\nimport usersFromServer from './api/users';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\nimport { getNewTodoId, getUserById, normalizeInputValue } from './helper';\n\nconst initialTodos = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [todos, setTodos] = useState(initialTodos);\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState(false);\n  const [userId, setUserId] = useState(0);\n  const [userIdError, setUserIdError] = useState(false);\n\n  const addTodo = (newTodo: Todo) => {\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(normalizeInputValue(event.target.value));\n    setTitleError(false);\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setUserIdError(false);\n  };\n\n  const resetForm = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!title.trim()) {\n      setTitleError(true);\n\n      return;\n    }\n\n    if (!userId) {\n      setUserIdError(true);\n\n      return;\n    }\n\n    addTodo({\n      id: getNewTodoId(todos),\n      title,\n      userId,\n      completed: false,\n      user: getUserById(userId),\n    });\n\n    resetForm();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">\n            Title:\n          </label>\n\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"title\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleTitleChange}\n          />\n          {titleError && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">\n            User:\n          </label>\n\n          <select\n            data-cy=\"userSelect\"\n            id=\"user\"\n            value={userId}\n            onChange={handleUserIdChange}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {userIdError && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}